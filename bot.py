import os
import json
import openai
from collections import defaultdict
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# === –ü–∞–ø–∫–∞ –¥–ª—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ ===
DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)

# === –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
user_roles = defaultdict(lambda: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ ChatGPT. –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.")
user_modes = defaultdict(lambda: "assistant")  # —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è: assistant / story

# === –§—É–Ω–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏ ===
def load_memory(user_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
    path = os.path.join(DATA_DIR, f"memory_{user_id}.json")
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_memory(user_id, context):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    path = os.path.join(DATA_DIR, f"memory_{user_id}.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(context, f, ensure_ascii=False, indent=2)

# === –†–æ–ª–∏ ===
ROLES = {
    "psychologist": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ–≤–æ—Ä–∏—à—å –º—è–≥–∫–æ, —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º.",
    "teacher": "–¢—ã —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —É—á–∏—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–µ—à—å –ø—Ä–æ—Å—Ç–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
    "fitness_trainer": "–¢—ã —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä, –º–æ—Ç–∏–≤–∏—Ä—É–µ—à—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å.",
    "marketer": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏, –≥–æ–≤–æ—Ä–∏—à—å –ø–æ –¥–µ–ª—É.",
    "developer": "–¢—ã —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –æ–±—ä—è—Å–Ω—è–µ—à—å –∫–æ–¥ –ª–æ–≥–∏—á–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.",
    "copywriter": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–æ–∑–¥–∞—ë—à—å —Ç–µ–∫—Å—Ç—ã, –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏–¥–µ–∏.",
    "doctor": "–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –≤—Ä–∞—á, –æ–±—ä—è—Å–Ω—è–µ—à—å –ø—Ä–æ—Å—Ç–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ.",
    "lawyer": "–¢—ã —é—Ä–∏—Å—Ç, –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.",
    "architect": "–¢—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –æ –¥–∏–∑–∞–π–Ω–µ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏.",
    "financial_advisor": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º, –¥–∞—ë—à—å —É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.",
    "project_manager": "–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å —à–∞–≥–∏ –∏ —Ü–µ–ª–∏.",
    "editor": "–¢—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä, –ø–æ–º–æ–≥–∞–µ—à—å —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç—ã.",
    "chef": "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å —Ä–µ—Ü–µ–ø—Ç—ã –≤–∫—É—Å–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ.",
    "historian": "–¢—ã –∏—Å—Ç–æ—Ä–∏–∫, –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–æ–±—ã—Ç–∏—è –∂–∏–≤–æ –∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.",
    "astrologer": "–¢—ã –∞—Å—Ç—Ä–æ–ª–æ–≥, –æ–±—ä—è—Å–Ω—è–µ—à—å –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ –∏ –º—è–≥–∫–æ.",
    "psychiatrist": "–¢—ã –ø—Å–∏—Ö–∏–∞—Ç—Ä, –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Å —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º.",
    "hr": "–¢—ã HR, –ø–æ–º–æ–≥–∞–µ—à—å —Å –∫–∞—Ä—å–µ—Ä–æ–π –∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º–∏.",
    "art_expert": "–¢—ã –∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ –∫—É–ª—å—Ç—É—Ä–µ —Å —á—É–≤—Å—Ç–≤–æ–º.",
    "coach": "–¢—ã –∫–æ—É—á, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –∏ –ø–æ–º–æ–≥–∞–µ—à—å –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª—è–º.",
}

STORY_MODE_PROMPT = """
–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –í–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–∑–¥–∞—ë—à—å –∏—Å—Ç–æ—Ä–∏–∏.
–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π 2‚Äì3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–π, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
"""

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø GPT-–±–æ—Ç —Å –ø–∞–º—è—Ç—å—é –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º –≤–≤–æ–¥–æ–º.\n\n"
        "üí¨ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/role [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, /role doctor)\n"
        "/story ‚Äî –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/save ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n"
        "/new ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å"
    )

async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ä–æ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /role marketer")
        return

    role_name = " ".join(context.args).lower()
    if role_name in ROLES:
        user_roles[user_id] = ROLES[role_name]
        user_modes[user_id] = "assistant"
        await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å —è ‚Äî {role_name}! üë®‚Äçüíº")
    else:
        await update.message.reply_text("–¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ:\n" + ", ".join(ROLES.keys()))

async def new_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    save_memory(user_id, [])
    await update.message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!")

async def story_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_modes[user_id] = "story"
    await update.message.reply_text("üìñ –ù–∞—á–Ω—ë–º –∏—Å—Ç–æ—Ä–∏—é! –†–∞—Å—Å–∫–∞–∂–∏, –æ —á—ë–º –æ–Ω–∞ –±—É–¥–µ—Ç?")

async def save_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    context_data = load_memory(user_id)
    if not context_data:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å üòÖ")
        return

    filename = f"chat_{user_id}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        for msg in context_data:
            role = "–¢—ã" if msg["role"] == "user" else "–ë–æ—Ç"
            f.write(f"{role}: {msg['content']}\n\n")

    await update.message.reply_document(InputFile(filename), caption="üíæ –í–æ—Ç —Ç–≤–æ–π –¥–∏–∞–ª–æ–≥.")
    os.remove(filename)

# === –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ ===
async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    file = await update.message.voice.get_file()
    file_path = f"voice_{user_id}.ogg"
    await file.download_to_drive(file_path)

    with open(file_path, "rb") as audio_file:
        transcript = openai.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file
        )
    os.remove(file_path)

    text = transcript.text.strip()
    await update.message.reply_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
    await handle_message(update, context, text_input=text)

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text_input=None):
    user_id = update.message.from_user.id
    text = text_input if text_input else update.message.text

    context_data = load_memory(user_id)
    context_data.append({"role": "user", "content": text})
    mode = user_modes[user_id]
    system_prompt = STORY_MODE_PROMPT if mode == "story" else user_roles[user_id]
    messages = [{"role": "system", "content": system_prompt}] + context_data[-10:]

    try:
        await update.message.reply_chat_action("typing")
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=400,
        )
        reply = response.choices[0].message.content.strip()
        context_data.append({"role": "assistant", "content": reply})
        save_memory(user_id, context_data)
        await update.message.reply_text(reply)

    except Exception as e:
        print(e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API.")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("role", set_role))
    app.add_handler(CommandHandler("story", story_mode))
    app.add_handler(CommandHandler("save", save_chat))
    app.add_handler(CommandHandler("new", new_chat))
    app.add_handler(MessageHandler(filters.VOICE, voice_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–∞–º—è—Ç—å—é –∏ –≥–æ–ª–æ—Å–æ–º!")
    app.run_polling()

if __name__ == "__main__":
    main()
